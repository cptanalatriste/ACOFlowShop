/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package pe.edu.pucp.ia.aco.view;

import java.awt.Color;
import java.awt.Graphics;
import java.util.Random;

/**
 *
 * @author Adriano
 */
public class SchedulingFrame extends javax.swing.JFrame {

    /**
     * Creates new form SchedulingFrame
     */
    public SchedulingFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FLOWSHOP PROBLEM");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1330, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 539, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SchedulingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SchedulingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SchedulingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SchedulingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SchedulingFrame().setVisible(true);
            }
        });
    }

    public void paint(Graphics g) {
        super.paint(g);
        int[] schedulingJobs = new int[20];         //Programacion de Trabajos
        schedulingJobs[0] = 13;
        schedulingJobs[1] = 0;
        schedulingJobs[2] = 18;
        schedulingJobs[3] = 16;
        schedulingJobs[4] = 19;
        schedulingJobs[5] = 1;
        schedulingJobs[6] = 2;
        schedulingJobs[7] = 5;
        schedulingJobs[8] = 15;
        schedulingJobs[9] = 6;
        schedulingJobs[10] = 4;
        schedulingJobs[11] = 12;
        schedulingJobs[12] = 10;
        schedulingJobs[13] = 14;
        schedulingJobs[14] = 9;
        schedulingJobs[15] = 8;
        schedulingJobs[16] = 3;
        schedulingJobs[17] = 11;
        schedulingJobs[18] = 7;
        schedulingJobs[19] = 17;
        double makespan = 1211;                     //Makespan de la programaciÃ³n
        int[][] matrix = new int[20][10];            //Matriz de jobsXtrabajos
        matrix[0][0] = 62;
        matrix[0][1] = 22;
        matrix[0][2] = 77;
        matrix[0][3] = 88;
        matrix[0][4] = 39;
        matrix[0][5] = 23;
        matrix[0][6] = 22;
        matrix[0][7] = 77;
        matrix[0][8] = 88;
        matrix[0][9] = 39;
        matrix[1][0] = 68;
        matrix[1][1] = 94;
        matrix[1][2] = 66;
        matrix[1][3] = 57;
        matrix[1][4] = 48;
        matrix[1][5] = 23;
        matrix[1][6] = 94;
        matrix[1][7] = 66;
        matrix[1][8] = 57;
        matrix[1][9] = 48;
        matrix[2][0] = 57;
        matrix[2][1] = 6;
        matrix[2][2] = 20;
        matrix[2][3] = 24;
        matrix[2][4] = 86;
        matrix[2][5] = 23;
        matrix[2][6] = 20;
        matrix[2][7] = 24;
        matrix[2][8] = 86;
        matrix[2][9] = 23;
        matrix[3][0] = 54;
        matrix[3][1] = 37;
        matrix[3][2] = 87;
        matrix[3][3] = 50;
        matrix[3][4] = 78;
        matrix[3][5] = 23;
        matrix[3][6] = 87;
        matrix[3][7] = 50;
        matrix[3][8] = 78;
        matrix[3][9] = 23;
        matrix[4][0] = 50;
        matrix[4][1] = 80;
        matrix[4][2] = 62;
        matrix[4][3] = 60;
        matrix[4][4] = 58;
        matrix[4][5] = 23;
        matrix[4][6] = 62;
        matrix[4][7] = 60;
        matrix[4][8] = 58;
        matrix[4][9] = 23;
        matrix[5][0] = 59;
        matrix[5][1] = 78;
        matrix[5][2] = 79;
        matrix[5][3] = 93;
        matrix[5][4] = 88;
        matrix[5][5] = 23;
        matrix[5][6] = 79;
        matrix[5][7] = 93;
        matrix[5][8] = 88;
        matrix[5][9] = 23;
        matrix[6][0] = 36;
        matrix[6][1] = 55;
        matrix[6][2] = 10;
        matrix[6][3] = 13;
        matrix[6][4] = 43;
        matrix[6][5] = 23;
        matrix[6][6] = 10;
        matrix[6][7] = 13;
        matrix[6][8] = 43;
        matrix[6][9] = 23;
        matrix[7][0] = 46;
        matrix[7][1] = 81;
        matrix[7][2] = 36;
        matrix[7][3] = 13;
        matrix[7][4] = 36;
        matrix[7][5] = 23;
        matrix[7][6] = 36;
        matrix[7][7] = 13;
        matrix[7][8] = 36;
        matrix[7][9] = 23;
        matrix[8][0] = 83;
        matrix[8][1] = 67;
        matrix[8][2] = 39;
        matrix[8][3] = 1;
        matrix[8][4] = 88;
        matrix[8][5] = 23;
        matrix[8][6] = 39;
        matrix[8][7] = 1;
        matrix[8][8] = 88;
        matrix[8][9] = 23;
        matrix[9][0] = 23;
        matrix[9][1] = 54;
        matrix[9][2] = 25;
        matrix[9][3] = 8;
        matrix[9][4] = 2;
        matrix[9][5] = 23;
        matrix[9][6] = 25;
        matrix[9][7] = 8;
        matrix[9][8] = 2;
        matrix[9][9] = 23;
        matrix[10][0] = 2;
        matrix[10][1] = 57;
        matrix[10][2] = 82;
        matrix[10][3] = 63;
        matrix[10][4] = 16;
        matrix[10][5] = 23;
        matrix[10][6] = 82;
        matrix[10][7] = 63;
        matrix[10][8] = 16;
        matrix[10][9] = 23;
        matrix[11][0] = 38;
        matrix[11][1] = 20;
        matrix[11][2] = 93;
        matrix[11][3] = 15;
        matrix[11][4] = 13;
        matrix[11][5] = 23;
        matrix[11][6] = 93;
        matrix[11][7] = 15;
        matrix[11][8] = 13;
        matrix[11][9] = 23;
        matrix[12][0] = 82;
        matrix[12][1] = 51;
        matrix[12][2] = 66;
        matrix[12][3] = 89;
        matrix[12][4] = 63;
        matrix[12][5] = 23;
        matrix[12][6] = 66;
        matrix[12][7] = 89;
        matrix[12][8] = 63;
        matrix[12][9] = 23;
        matrix[13][0] = 9;
        matrix[13][1] = 34;
        matrix[13][2] = 42;
        matrix[13][3] = 42;
        matrix[13][4] = 46;
        matrix[13][5] = 23;
        matrix[13][6] = 42;
        matrix[13][7] = 42;
        matrix[13][8] = 46;
        matrix[13][9] = 23;
        matrix[14][0] = 76;
        matrix[14][1] = 25;
        matrix[14][2] = 13;
        matrix[14][3] = 13;
        matrix[14][4] = 23;
        matrix[14][5] = 23;
        matrix[14][6] = 13;
        matrix[14][7] = 13;
        matrix[14][8] = 23;
        matrix[14][9] = 23;
        matrix[15][0] = 99;
        matrix[15][1] = 34;
        matrix[15][2] = 77;
        matrix[15][3] = 24;
        matrix[15][4] = 41;
        matrix[15][5] = 23;
        matrix[15][6] = 77;
        matrix[15][7] = 24;
        matrix[15][8] = 41;
        matrix[15][9] = 23;
        matrix[16][0] = 76;
        matrix[16][1] = 23;
        matrix[16][2] = 96;
        matrix[16][3] = 56;
        matrix[16][4] = 84;
        matrix[16][5] = 23;
        matrix[16][6] = 96;
        matrix[16][7] = 56;
        matrix[16][8] = 84;
        matrix[16][9] = 23;
        matrix[17][0] = 12;
        matrix[17][1] = 94;
        matrix[17][2] = 2;
        matrix[17][3] = 5;
        matrix[17][4] = 9;
        matrix[17][5] = 23;
        matrix[17][6] = 2;
        matrix[17][7] = 5;
        matrix[17][8] = 9;
        matrix[17][9] = 23;
        matrix[18][0] = 13;
        matrix[18][1] = 84;
        matrix[18][2] = 57;
        matrix[18][3] = 78;
        matrix[18][4] = 72;
        matrix[18][5] = 23;
        matrix[18][6] = 57;
        matrix[18][7] = 78;
        matrix[18][8] = 72;
        matrix[18][9] = 23;
        matrix[19][0] = 19;
        matrix[19][1] = 86;
        matrix[19][2] = 6;
        matrix[19][3] = 58;
        matrix[19][4] = 27;
        matrix[19][5] = 23;
        matrix[19][6] = 6;
        matrix[19][7] = 58;
        matrix[19][8] = 27;
        matrix[19][9] = 23;

        int numberJobs = schedulingJobs.length;

        int red = 0;
        int green = 0;
        int blue = 0;

        int factor = 1;
        while (makespan > this.getWidth()) {
            factor = factor * 2;
            makespan = makespan / 2;
        }

        int posT = 20;
        int posX = 20;
        int posY = 20;
        int width = 0;

        Color color = null;

        int machines = matrix[0].length;
        double[] machinesTime = new double[machines];
        double tiempo = 0;

        int height = this.getHeight() / (machines * 2);

        g.drawString("MAKESPAN:" + makespan, 350, 380);

        for (int job : schedulingJobs) {
            Random r = new Random();
            red = r.nextInt(255) + 1;
            green = r.nextInt(255) + 1;
            blue = r.nextInt(255) + 1;
            color = new Color(red, green, blue);
            g.setColor(color);
            g.fillRect(posT, 400, 40, 20);
            g.setColor(new Color(255, 255, 255));
            g.drawString(String.valueOf(job + 1), posT + 15, 400);
            g.setColor(color);
            posT = posT + 60;
            posY = 20;
            for (int i = 0; i < machines; i++) {
                tiempo = matrix[job][i];
                posY = posY + height;
                if (i == 0) {
                    if (posX == 20) {
                        machinesTime[i] = machinesTime[i] + tiempo;
                        g.fillRect(i * (int) machinesTime[i] / factor, posY, (int) tiempo / factor, height);
                        posX = 40;
                    } else {
                        machinesTime[i] = machinesTime[i] + tiempo;
                        g.fillRect((int) (machinesTime[i] - tiempo) / factor, posY, (int) tiempo / factor, height);
                    }
                } else {
                    if (machinesTime[i] > machinesTime[i - 1]) {
                        g.fillRect((int) (machinesTime[i]) / factor, posY, (int) tiempo / factor, height);
                        machinesTime[i] = machinesTime[i] + tiempo;
                    } else {
                        machinesTime[i] = machinesTime[i - 1] + tiempo;
                        g.fillRect((int) machinesTime[i - 1] / factor, posY, (int) tiempo / factor, height);
                    }
                }
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
